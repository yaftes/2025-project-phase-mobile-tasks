// Mocks generated by Mockito 5.4.6 from annotations
// in e_commerce/test/features/data/repositories/product_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:e_commerce/core/platform/network_info.dart' as _i3;
import 'package:e_commerce/features/product/data/datasources/product_local_data_source.dart'
    as _i6;
import 'package:e_commerce/features/product/data/datasources/product_remote_data_source.dart'
    as _i5;
import 'package:e_commerce/features/product/domain/entities/product.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProduct_0 extends _i1.SmartFake implements _i2.Product {
  _FakeProduct_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [ProductRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDataSource extends _i1.Mock
    implements _i5.ProductRemoteDataSource {
  MockProductRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Product>> viewAllProducts() =>
      (super.noSuchMethod(
            Invocation.method(#viewAllProducts, []),
            returnValue: _i4.Future<List<_i2.Product>>.value(<_i2.Product>[]),
          )
          as _i4.Future<List<_i2.Product>>);

  @override
  _i4.Future<_i2.Product> viewSpecificProduct(String? productId) =>
      (super.noSuchMethod(
            Invocation.method(#viewSpecificProduct, [productId]),
            returnValue: _i4.Future<_i2.Product>.value(
              _FakeProduct_0(
                this,
                Invocation.method(#viewSpecificProduct, [productId]),
              ),
            ),
          )
          as _i4.Future<_i2.Product>);

  @override
  _i4.Future<void> createProduct(_i2.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#createProduct, [product]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.Product> updateProduct(_i2.Product? product) =>
      (super.noSuchMethod(
            Invocation.method(#updateProduct, [product]),
            returnValue: _i4.Future<_i2.Product>.value(
              _FakeProduct_0(
                this,
                Invocation.method(#updateProduct, [product]),
              ),
            ),
          )
          as _i4.Future<_i2.Product>);

  @override
  _i4.Future<void> deleteProduct(String? productId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [productId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ProductLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSource extends _i1.Mock
    implements _i6.ProductLocalDataSource {
  MockProductLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Product>> getRecentProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getRecentProducts, []),
            returnValue: _i4.Future<List<_i2.Product>>.value(<_i2.Product>[]),
          )
          as _i4.Future<List<_i2.Product>>);
}
